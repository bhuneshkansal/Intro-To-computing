#1
def perfect_number(number):
    sum = 0
    for i in range(1,number):
        if number % i ==0:
            sum +=i
    if sum == number:
        print("The number is perfect!")
    else:
        print('The number is not perfect!')
        
perfect_number(28)
perfect_number(82)

#2
def palindrome_checker(string):
    
    string = string.replace(" ","")
    string2 = ""
    for i in string:
        string2 = i + string2

    if string2 == string:
        print("The string is a palindrome!")
    else:
        print("The string is not a palindrome!")

# driver code
palindrome_checker('a nut for a jar of tuna')

#3
from math import factorial

# input n
def pascal_triangle(n):

    for i in range(n):
	    for j in range(n-i+1):

		    # for left spacing
		    print(end=" ")

	    for j in range(i+1):

		# nCr = n!/((n-r)!*r!)
		    print(factorial(i)//(factorial(j)*factorial(i-j)), end=" ")

	# for new line
	    print()
# driver code
pascal_triangle(5)

#4
import string

def ispangram(str):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    for char in alphabet:
        if char not in str.lower():
            return False

    return True

# Driver code
string = 'the quick brown fox jumps over the lazy dog'
if(ispangram(string) == True):
    print("Yes")
else:
    print("No")
    
#5
def function1(string):
    
    string = string.split('-')
    string.sort()
    string = '-'.join(string)
    print(string)

function1("green-yellow-red-white-black")

#6
def student_data(student_id, **kwargs):
    print(f'\nStudent ID: {student_id}')
    if 'student_name' in kwargs:
        print(f"Student Name: $ {kwargs['student_name']}")
    
    if 'student_name' and 'student_class' in kwargs:
            print(f"\nStudent Name: $ {kwargs['student_name']}")
            print(f"Student Class: $ {kwargs['student_class']}")

 
student_data(student_id='SV12', student_name='Jean Garner')

student_data(student_id='SV12', student_name='Jean Garner', student_class ='V')

#7
class Student:
    pass 
class Marks:
    pass 
student1 = Student()
marks1 = Marks()
print(isinstance(student1, Student))
print(isinstance(marks1, Student))
print(isinstance(marks1, Marks)) 
print(isinstance(student1, Marks))
print("\nCheck whether the said classes are subclasses of the built-in object class or not.")
print(issubclass(Student, object))
print(issubclass(Marks, object))

#8
Input array: [-25, -10, -7, -3, 2, 4, 8, 10]
Output: [[-10, 2, 8], [-7, -3, 10]]'''
class py_solution:
    def threeSum(self, nums):
        nums, result, i = sorted(nums), [], 0
        while i < len(nums) - 2:
            j, k = i + 1, len(nums) - 1
            while j < k:
                if nums[i] + nums[j] + nums[k] < 0:
                    j += 1
                elif nums[i] + nums[j] + nums[k] > 0:
                    k -= 1
                else:
                    result.append([nums[i], nums[j], nums[k]])
                    j, k = j + 1, k - 1
                    while j < k and nums[j] == nums[j - 1]:
                        j += 1
                    while j < k and nums[k] == nums[k + 1]:
                        k -= 1
            i += 1
            while i < len(nums) - 2 and nums[i] == nums[i - 1]:
                i += 1
        return result

print(py_solution().threeSum([-25, -10, -7, -3, 2, 4, 8, 10]))

#9
class py_solution:
    def is_valid_parenthese(self, str1):
        stack, pchar = [], {"(": ")", "{": "}", "[": "]"}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0

print(py_solution().is_valid_parenthese("(){}[]"))
print(py_solution().is_valid_parenthese("()[{)}"))
print(py_solution().is_valid_parenthese("()"))
